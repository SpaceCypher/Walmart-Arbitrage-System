version: '3.8'

services:
  # KeyDB (Redis-compatible) for real-time data
  keydb:
    image: eqalpha/keydb:latest
    container_name: arbitrage-keydb
    ports:
      - "6379:6379"
    environment:
      - KEYDB_PASSWORD=arbitrage_redis_password
    volumes:
      - keydb_data:/data
    command: keydb-server --requirepass arbitrage_redis_password --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - arbitrage-network

  # MongoDB for document storage
  mongodb:
    image: mongo:7.0
    container_name: arbitrage-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=arbitrage_user
      - MONGO_INITDB_ROOT_PASSWORD=arbitrage_mongo_password
      - MONGO_INITDB_DATABASE=arbitrage_db
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - arbitrage-network

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: arbitrage-n8n
    ports:
      - "5678:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=arbitrage_n8n_password
      - WEBHOOK_URL=http://localhost:5678/
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - arbitrage-network

  # PostgreSQL for n8n
  postgres:
    image: postgres:15
    container_name: arbitrage-postgres
    environment:
      - POSTGRES_USER=n8n_user
      - POSTGRES_PASSWORD=n8n_password
      - POSTGRES_DB=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - arbitrage-network

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: arbitrage-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=arbitrage_grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - arbitrage-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: arbitrage-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - arbitrage-network

  # Backend API Service (for development)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: arbitrage-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - KEYDB_URL=redis://keydb:6379
      - KEYDB_PASSWORD=arbitrage_redis_password
      - MONGODB_URL=mongodb://arbitrage_user:arbitrage_mongo_password@mongodb:27017/arbitrage_db
      - JWT_SECRET=your_jwt_secret_key_here
      - GEMINI_API_KEY=your_gemini_api_key_here
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
    depends_on:
      - keydb
      - mongodb
    restart: unless-stopped
    networks:
      - arbitrage-network

  # Frontend Application (for development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: arbitrage-frontend
    ports:
      - "3002:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3000/api/v1
      - REACT_APP_WS_URL=ws://localhost:3000
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/package.json:/app/package.json
      - ./frontend/tsconfig.json:/app/tsconfig.json
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - arbitrage-network

volumes:
  keydb_data:
    driver: local
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  arbitrage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
